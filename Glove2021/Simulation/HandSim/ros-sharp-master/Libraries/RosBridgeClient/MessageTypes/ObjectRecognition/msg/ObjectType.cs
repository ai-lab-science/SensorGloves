/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



namespace RosSharp.RosBridgeClient.MessageTypes.ObjectRecognition
{
    public class ObjectType : Message
    {
        public const string RosMessageName = "object_recognition_msgs/ObjectType";

        // ################################################# OBJECT ID #########################################################
        //  Contains information about the type of a found object. Those two sets of parameters together uniquely define an
        //  object
        //  The key of the found object: the unique identifier in the given db
        public string key { get; set; }
        //  The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
        //  database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
        //  There is no conventional format for those parameters and it's nice to keep that flexibility.
        //  The object_recognition_core as a generic DB type that can read those fields
        //  Current examples:
        //  For CouchDB:
        //    type: 'CouchDB'
        //    root: 'http://localhost:5984'
        //    collection: 'object_recognition'
        //  For SQL household database:
        //    type: 'SqlHousehold'
        //    host: 'wgs36'
        //    port: 5432
        //    user: 'willow'
        //    password: 'willow'
        //    name: 'household_objects'
        //    module: 'tabletop'
        public string db { get; set; }

        public ObjectType()
        {
            this.key = "";
            this.db = "";
        }

        public ObjectType(string key, string db)
        {
            this.key = key;
            this.db = db;
        }
    }
}
