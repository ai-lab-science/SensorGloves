/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



using RosSharp.RosBridgeClient.MessageTypes.Geometry;

namespace RosSharp.RosBridgeClient.MessageTypes.Moveit
{
    public class ChangeDriftDimensionsRequest : Message
    {
        public const string RosMessageName = "moveit_msgs/ChangeDriftDimensions";

        //  For use with moveit_jog_arm Cartesian planner
        // 
        //  Allow the robot to drift along these dimensions in a smooth but unregulated way.
        //  Give 'true' to enable drift in the direction, 'false' to disable.
        //  For example, may allow wrist rotation by drift_x_rotation == true.
        public bool drift_x_translation { get; set; }
        public bool drift_y_translation { get; set; }
        public bool drift_z_translation { get; set; }
        public bool drift_x_rotation { get; set; }
        public bool drift_y_rotation { get; set; }
        public bool drift_z_rotation { get; set; }
        //  Not implemented as of Jan 2020 (for now assumed to be the identity matrix). In the future it will allow us to transform
        //  from the jog control frame to a unique drift frame, so the robot can drift along off-principal axes
        public Transform transform_jog_frame_to_drift_frame { get; set; }

        public ChangeDriftDimensionsRequest()
        {
            this.drift_x_translation = false;
            this.drift_y_translation = false;
            this.drift_z_translation = false;
            this.drift_x_rotation = false;
            this.drift_y_rotation = false;
            this.drift_z_rotation = false;
            this.transform_jog_frame_to_drift_frame = new Transform();
        }

        public ChangeDriftDimensionsRequest(bool drift_x_translation, bool drift_y_translation, bool drift_z_translation, bool drift_x_rotation, bool drift_y_rotation, bool drift_z_rotation, Transform transform_jog_frame_to_drift_frame)
        {
            this.drift_x_translation = drift_x_translation;
            this.drift_y_translation = drift_y_translation;
            this.drift_z_translation = drift_z_translation;
            this.drift_x_rotation = drift_x_rotation;
            this.drift_y_rotation = drift_y_rotation;
            this.drift_z_rotation = drift_z_rotation;
            this.transform_jog_frame_to_drift_frame = transform_jog_frame_to_drift_frame;
        }
    }
}
