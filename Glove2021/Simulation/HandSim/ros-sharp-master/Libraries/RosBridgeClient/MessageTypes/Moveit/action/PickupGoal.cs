/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



namespace RosSharp.RosBridgeClient.MessageTypes.Moveit
{
    public class PickupGoal : Message
    {
        public const string RosMessageName = "moveit_msgs/PickupGoal";

        //  An action for picking up an object
        //  The name of the object to pick up (as known in the planning scene)
        public string target_name { get; set; }
        //  which group should be used to plan for pickup
        public string group_name { get; set; }
        //  which end-effector to be used for pickup (ideally descending from the group above)
        public string end_effector { get; set; }
        //  a list of possible grasps to be used. At least one grasp must be filled in
        public Grasp[] possible_grasps { get; set; }
        //  the name that the support surface (e.g. table) has in the collision map
        //  can be left empty if no name is available
        public string support_surface_name { get; set; }
        //  whether collisions between the gripper and the support surface should be acceptable
        //  during move from pre-grasp to grasp and during lift. Collisions when moving to the
        //  pre-grasp location are still not allowed even if this is set to true.
        public bool allow_gripper_support_collision { get; set; }
        //  The names of the links the object to be attached is allowed to touch;
        //  If this is left empty, it defaults to the links in the used end-effector
        public string[] attached_object_touch_links { get; set; }
        //  Optionally notify the pick action that it should approach the object further,
        //  as much as possible (this minimizing the distance to the object before the grasp)
        //  along the approach direction; Note: this option changes the grasping poses
        //  supplied in possible_grasps[] such that they are closer to the object when possible.
        public bool minimize_object_distance { get; set; }
        //  Optional constraints to be imposed on every point in the motion plan
        public Constraints path_constraints { get; set; }
        //  The name of the motion planner to use. If no name is specified,
        //  a default motion planner will be used
        public string planner_id { get; set; }
        //  an optional list of obstacles that we have semantic information about
        //  and that can be touched/pushed/moved in the course of grasping;
        //  CAREFUL: If the object name 'all' is used, collisions with all objects are disabled during the approach & lift.
        public string[] allowed_touch_objects { get; set; }
        //  The maximum amount of time the motion planner is allowed to plan for
        public double allowed_planning_time { get; set; }
        //  Planning options
        public PlanningOptions planning_options { get; set; }

        public PickupGoal()
        {
            this.target_name = "";
            this.group_name = "";
            this.end_effector = "";
            this.possible_grasps = new Grasp[0];
            this.support_surface_name = "";
            this.allow_gripper_support_collision = false;
            this.attached_object_touch_links = new string[0];
            this.minimize_object_distance = false;
            this.path_constraints = new Constraints();
            this.planner_id = "";
            this.allowed_touch_objects = new string[0];
            this.allowed_planning_time = 0.0;
            this.planning_options = new PlanningOptions();
        }

        public PickupGoal(string target_name, string group_name, string end_effector, Grasp[] possible_grasps, string support_surface_name, bool allow_gripper_support_collision, string[] attached_object_touch_links, bool minimize_object_distance, Constraints path_constraints, string planner_id, string[] allowed_touch_objects, double allowed_planning_time, PlanningOptions planning_options)
        {
            this.target_name = target_name;
            this.group_name = group_name;
            this.end_effector = end_effector;
            this.possible_grasps = possible_grasps;
            this.support_surface_name = support_surface_name;
            this.allow_gripper_support_collision = allow_gripper_support_collision;
            this.attached_object_touch_links = attached_object_touch_links;
            this.minimize_object_distance = minimize_object_distance;
            this.path_constraints = path_constraints;
            this.planner_id = planner_id;
            this.allowed_touch_objects = allowed_touch_objects;
            this.allowed_planning_time = allowed_planning_time;
            this.planning_options = planning_options;
        }
    }
}
