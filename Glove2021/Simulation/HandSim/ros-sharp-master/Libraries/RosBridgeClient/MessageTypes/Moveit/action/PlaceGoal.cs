/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



namespace RosSharp.RosBridgeClient.MessageTypes.Moveit
{
    public class PlaceGoal : Message
    {
        public const string RosMessageName = "moveit_msgs/PlaceGoal";

        //  An action for placing an object
        //  which group to be used to plan for grasping
        public string group_name { get; set; }
        //  the name of the attached object to place
        public string attached_object_name { get; set; }
        //  a list of possible transformations for placing the object
        public PlaceLocation[] place_locations { get; set; }
        //  if the user prefers setting the eef pose (same as in pick) rather than 
        //  the location of the object, this flag should be set to true
        public bool place_eef { get; set; }
        //  the name that the support surface (e.g. table) has in the collision world
        //  can be left empty if no name is available
        public string support_surface_name { get; set; }
        //  whether collisions between the gripper and the support surface should be acceptable
        //  during move from pre-place to place and during retreat. Collisions when moving to the
        //  pre-place location are still not allowed even if this is set to true.
        public bool allow_gripper_support_collision { get; set; }
        //  Optional constraints to be imposed on every point in the motion plan
        public Constraints path_constraints { get; set; }
        //  The name of the motion planner to use. If no name is specified,
        //  a default motion planner will be used
        public string planner_id { get; set; }
        //  an optional list of obstacles that we have semantic information about
        //  and that can be touched/pushed/moved in the course of placing;
        //  CAREFUL: If the object name 'all' is used, collisions with all objects are disabled during the approach & retreat.
        public string[] allowed_touch_objects { get; set; }
        //  The maximum amount of time the motion planner is allowed to plan for
        public double allowed_planning_time { get; set; }
        //  Planning options
        public PlanningOptions planning_options { get; set; }

        public PlaceGoal()
        {
            this.group_name = "";
            this.attached_object_name = "";
            this.place_locations = new PlaceLocation[0];
            this.place_eef = false;
            this.support_surface_name = "";
            this.allow_gripper_support_collision = false;
            this.path_constraints = new Constraints();
            this.planner_id = "";
            this.allowed_touch_objects = new string[0];
            this.allowed_planning_time = 0.0;
            this.planning_options = new PlanningOptions();
        }

        public PlaceGoal(string group_name, string attached_object_name, PlaceLocation[] place_locations, bool place_eef, string support_surface_name, bool allow_gripper_support_collision, Constraints path_constraints, string planner_id, string[] allowed_touch_objects, double allowed_planning_time, PlanningOptions planning_options)
        {
            this.group_name = group_name;
            this.attached_object_name = attached_object_name;
            this.place_locations = place_locations;
            this.place_eef = place_eef;
            this.support_surface_name = support_surface_name;
            this.allow_gripper_support_collision = allow_gripper_support_collision;
            this.path_constraints = path_constraints;
            this.planner_id = planner_id;
            this.allowed_touch_objects = allowed_touch_objects;
            this.allowed_planning_time = allowed_planning_time;
            this.planning_options = planning_options;
        }
    }
}
