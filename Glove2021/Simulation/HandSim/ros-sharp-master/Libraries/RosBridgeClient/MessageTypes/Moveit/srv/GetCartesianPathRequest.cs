/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



using RosSharp.RosBridgeClient.MessageTypes.Std;
using RosSharp.RosBridgeClient.MessageTypes.Geometry;

namespace RosSharp.RosBridgeClient.MessageTypes.Moveit
{
    public class GetCartesianPathRequest : Message
    {
        public const string RosMessageName = "moveit_msgs/GetCartesianPath";

        //  Define the frame for the specified waypoints
        public Header header { get; set; }
        //  The start at which to start the Cartesian path
        public RobotState start_state { get; set; }
        //  Mandatory name of group to compute the path for
        public string group_name { get; set; }
        //  Optional name of IK link for which waypoints are specified.
        //  If not specified, the tip of the group (which is assumed to be a chain)
        //  is assumed to be the link
        public string link_name { get; set; }
        //  A sequence of waypoints to be followed by the specified link,
        //  while moving the specified group, such that the group moves only
        //  in a straight line between waypoints
        public Pose[] waypoints { get; set; }
        //  The maximum distance (in Cartesian space) between consecutive points
        //  in the returned path. This must always be specified and > 0
        public double max_step { get; set; }
        //  If jump_threshold is set > 0, it acts as a scaling factor that is used to
        //  filter out large relative joint-space jumps in the generated Cartesian path.
        //  To this end, the average joint-space distance between consecutive waypoints
        //  is computed. If any joint-space distance is larger than this average distance
        //  by a factor of jump_threshold_factor, this step is considered a jump
        //  and the returned path is truncated before the step.
        public double jump_threshold { get; set; }
        //  If prismatic_jump_threshold or revolute_jump_threshold are set > 0, then for
        //  all active prismatic or revolute joints, the joint-space difference between
        //  consecutive waypoints is compared to the respective absolute threshold.
        //  If any threshold is exceeded, this step is considered a jump and the returned path
        //  is truncated before the step.
        public double prismatic_jump_threshold { get; set; }
        public double revolute_jump_threshold { get; set; }
        //  Set to true if collisions should be avoided when possible
        public bool avoid_collisions { get; set; }
        //  Specify additional constraints to be met by the Cartesian path
        public Constraints path_constraints { get; set; }

        public GetCartesianPathRequest()
        {
            this.header = new Header();
            this.start_state = new RobotState();
            this.group_name = "";
            this.link_name = "";
            this.waypoints = new Pose[0];
            this.max_step = 0.0;
            this.jump_threshold = 0.0;
            this.prismatic_jump_threshold = 0.0;
            this.revolute_jump_threshold = 0.0;
            this.avoid_collisions = false;
            this.path_constraints = new Constraints();
        }

        public GetCartesianPathRequest(Header header, RobotState start_state, string group_name, string link_name, Pose[] waypoints, double max_step, double jump_threshold, double prismatic_jump_threshold, double revolute_jump_threshold, bool avoid_collisions, Constraints path_constraints)
        {
            this.header = header;
            this.start_state = start_state;
            this.group_name = group_name;
            this.link_name = link_name;
            this.waypoints = waypoints;
            this.max_step = max_step;
            this.jump_threshold = jump_threshold;
            this.prismatic_jump_threshold = prismatic_jump_threshold;
            this.revolute_jump_threshold = revolute_jump_threshold;
            this.avoid_collisions = avoid_collisions;
            this.path_constraints = path_constraints;
        }
    }
}
